/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.ColumnPositionMappingStrategyBuilder;
import com.opencsv.bean.CsvToBean;
import com.opencsv.bean.StatefulBeanToCsv;
import com.opencsv.bean.StatefulBeanToCsvBuilder;
import comparators.ComparatorA;
import comparators.ComparatorLex1;
import comparators.ComparatorLex2;
import comparators.ComparatorXuAndYager;
import entities.DataSet;
import fuzzy.IntervalValuedFuzzyEvaluation;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.hsqldb.Library;
import util.LibFile;
import util.LocalShell;
import util.MyComparator;
import util.Util;

/**
 *
 * @author bruno
 */
public class frmClassificador extends javax.swing.JFrame {

    /**
     * Creates new form frmClassificador
     */
    public frmClassificador() {
        initComponents();
        // centraliza o form no meio da tela
        setLocationRelativeTo(null);

        setTitle("Classificador de Trafego de Rede Fuzzy Tipo-2 Intervalar");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        lblStatusProcesso = new javax.swing.JLabel();
        JStatusProcesso = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtArquivo = new javax.swing.JTextField();
        btnArquivo = new javax.swing.JButton();
        txtArquivoSaida = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnExecutar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaErro = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaExecucao = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("frmClassificador"); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        jPanel3.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N

        lblStatusProcesso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStatusProcesso.setText("----------------------------------------------------------------------------------------------------------");

        JStatusProcesso.setStringPainted(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatusProcesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(JStatusProcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 963, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblStatusProcesso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JStatusProcesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Informações do dataset"));
        jPanel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N

        jLabel3.setText(" Dataset para classificar");

        btnArquivo.setText("Arquivo");
        btnArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArquivoActionPerformed(evt);
            }
        });

        jLabel4.setText("Arquivo de Saída");

        btnExecutar.setText("Executar");
        btnExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtArquivo)
                            .addComponent(txtArquivoSaida))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnExecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnArquivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArquivoSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExecutar))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Logs"));
        jPanel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N

        jLabel1.setText("Log de erro");

        txaErro.setColumns(20);
        txaErro.setRows(5);
        jScrollPane1.setViewportView(txaErro);

        jLabel2.setText("Log de execução");

        txaExecucao.setColumns(20);
        txaExecucao.setRows(5);
        jScrollPane2.setViewportView(txaExecucao);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArquivoActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Procurar arquivo");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV", "csv");
        fileChooser.setFileFilter(filter);

        int retorno = fileChooser.showOpenDialog(this);

        if (retorno == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtArquivo.setText(file.getPath());
        }


    }//GEN-LAST:event_btnArquivoActionPerformed

    private void btnExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutarActionPerformed

        new Thread() {

            @Override
            public void run() {

                //GerenciaCsv csv = new GerenciaCsv();
                //txaExecucao.setText(csv.lerCSV(txtArquivo.getText()));
                //https://www.youtube.com/watch?v=xLDViuYlqGM
                String path = txtArquivo.getText();

                try (BufferedReader br = new BufferedReader(new FileReader(path))) {

                    // Cria um ArrayList do objeto DataSet
                    ArrayList<DataSet> listDataSet = new ArrayList<DataSet>();

                    String strOutFile = "";
                    String strSeparadorCsv = ",";

                    // linha do cabeçalho
                    String line = br.readLine();
                    String strFileHeader = line;

                    // primeira linha do arquivo
                    line = br.readLine();

                    // para barra de progresso
                    int contador = 0;
                    JStatusProcesso.setMinimum(0);

                    //https://www.guj.com.br/t/quantidade-de-linhas-de-um-arquivo/45691/5
                    File arquivoLeitura = new File(path);
                    LineNumberReader linhaLeitura = new LineNumberReader(new FileReader(arquivoLeitura));
                    linhaLeitura.skip(arquivoLeitura.length());
                    //JOptionPane.showMessageDialog(null, linhaLeitura.getLineNumber());
                    JStatusProcesso.setMaximum(linhaLeitura.getLineNumber() - 1);

                    JStatusProcesso.setValue(0);
                    JStatusProcesso.setStringPainted(true);

                    // cria objeto do sistema de inferencia fuzzy 
                    // IntervalValuedFuzzyEvaluation fs = new IntervalValuedFuzzyEvaluation();
                    // cria objeto da classe Util com funções auxiliares
                    //Util util = new Util();
                    while (line != null) {

                        // atualiza o JStatusProgresso
                        contador++;
                        JStatusProcesso.setValue(contador);
                        lblStatusProcesso.setText("Processando fluxo: " + contador + " aguarde...");

                        // monta a String para colocar no txaExecucao
                        //strFile = strFile + line + "\n";
                        // faz o recorte da linha para alimentar objeto DataSet
                        String[] vect = line.split(strSeparadorCsv);

                        // double fwdPacketLengthMean = Double.parseDouble(vect[0]);  //Fwd Packet Length Mean
                        // double fwdPacketLengthStd = Double.parseDouble(vect[1]); //Fwd Packet Length Std
                        // double bwdIATTotal = Double.parseDouble(vect[2]); // Bwd IAT Total
                        // double packetLengthMean = Double.parseDouble(vect[3]); // Packet Length Mean
                        String flowLabel = vect[3]; // Label
                        //double normFwdPacketLengthMean = Double.parseDouble(vect[]);  //NormFwd_Packet_Length_Mean
                        double normPacketLengthMean = Double.parseDouble(vect[2]); // NormPacket_Length_Mean  

                        double normFwdPacketLengthStd = Double.parseDouble(vect[0]);  // NormFwd_Packet_Length_Std
                        double normBwdIATTotal = Double.parseDouble(vect[1]);  // NormBwd_IAT_Total
                        int sequencial = Integer.parseInt(vect[4]); // sequencial

                        // cria objeto do sistema de inferencia fuzzy 
                        // e seta os valores das variáveis/atributos de entrada do sistema fuzzy
                        IntervalValuedFuzzyEvaluation fs
                                = new IntervalValuedFuzzyEvaluation(normPacketLengthMean, normFwdPacketLengthStd,
                                        normBwdIATTotal, false, "maxmin", "minmax");

                        //executa o sistema de inferencia fuzzy
                        fs.getRating();

                        // Cria o objeto DataSet para armazenar os valores de saída
                        DataSet ds = new DataSet();
                        // Seta os valores de atributos no objeto através do dataset csv

                        // seta os valores do objeto fs para gerar o arquivo de saída
                        // ds.setFwdPacketLengthMean(fwdPacketLengthMean);
                        // ds.setFwdPacketLengthStd(fwdPacketLengthStd);
                        // ds.setBwdIATTotal(bwdIATTotal);
                        // ds.setPacketLengthMean(packetLengthMean);
                        ds.setFloxLabel(flowLabel);
                        // ds.setNormFwdPacketLengthMean(normFwdPacketLengthMean);
                        ds.setNormPacketLengthMean(normPacketLengthMean);
                        ds.setNormFwdPacketLengthStd(normFwdPacketLengthStd);
                        ds.setNormBwdIATTotal(Library.round(normBwdIATTotal, 6));

                        ds.setxPonctual(fs.getxPonctual());
                        ds.setxInf(fs.getxInf());
                        ds.setxSup(fs.getxSup());

                        // graus de pertinência de PacketLengthMean
                        ds.setLowPacketLengthMeanLowerBound(fs.getLowPacketLengthMeanLowerBound());
                        ds.setLowPacketLengthMeanUpperBound(fs.getLowPacketLengthMeanUpperBound());

                        ds.setReasonablePacketLengthMeanLowerBound(fs.getReasonablePacketLengthMeanLowerBound());
                        ds.setReasonablePacketLengthMeanUpperBound(fs.getReasonablePacketLengthMeanUpperBound());

                        ds.setHighPacketLengthMeanLowerBound(fs.getHighPacketLengthMeanLowerBound());
                        ds.setHighPacketLengthMeanUpperBound(fs.getHighPacketLengthMeanUpperBound());

                        // graus de pertinencia PacketLengthStd
                        ds.setLowPacketLengthStdUpperBound(fs.getLowPacketLengthStdUpperBound());
                        ds.setLowPacketLengthStdLowerBound(fs.getLowPacketLengthStdLowerBound());

                        ds.setReasonablePacketLengthStdLowerBound(fs.getReasonablePacketLengthStdLowerBound());
                        ds.setReasonablePacketLengthStdUpperBound(fs.getReasonablePacketLengthStdUpperBound());

                        ds.setHighPacketLengthStdLowerBound(fs.getHighPacketLengthStdLowerBound());
                        ds.setHighPacketLengthStdUpperBound(fs.getHighPacketLengthStdUpperBound());

                        // graus de pertinencia para backwardIatTotal
                        ds.setLowBackwardIatTotalLowerBound(fs.getLowBackwardIatTotalLowerBound());
                        ds.setLowBackwardIatTotalUpperBound(fs.getLowBackwardIatTotalUpperBound());

                        ds.setReasonableBackwardIatTotalLowerBound(fs.getReasonableBackwardIatTotalLowerBound());
                        ds.setReasonableBackwardIatTotalUpperBound(fs.getReasonableBackwardIatTotalUpperBound());

                        ds.setHighBackwardIatTotalLowerBound(fs.getHighBackwardIatTotalLowerBound());
                        ds.setHighBackwardIatTotalUpperBound(fs.getHighBackwardIatTotalUpperBound());

                        // graus de pertinencia para saida Video
                        ds.setLowVideoLowerBound(fs.getLowBackwardIatTotalLowerBound());
                        ds.setLowVideoUpperBound(fs.getLowBackwardIatTotalUpperBound());

                        ds.setAverageVideoLowerBound(fs.getAverageVideoLowerBound());
                        ds.setAverageVideoUpperBound(fs.getAverageVideoUpperBound());

                        ds.setHighVideoLowerBound(fs.getHighVideoLowerBound());
                        ds.setHighVideoUpperBound(fs.getHighVideoUpperBound());

                        ds.setSequencial(sequencial);

                        //adicionar o objeto a lista listDataSet
                        listDataSet.add(ds);

                        //ds.toString();
                        // monta a String para colocar no txaExecucao
                        strOutFile = strOutFile + line + strSeparadorCsv
                                //+ biatNormalizado + strSeparadorCsv

                                + ds.getLowPacketLengthMeanLowerBound() + strSeparadorCsv
                                + ds.getLowPacketLengthMeanUpperBound() + strSeparadorCsv
                                + ds.getReasonablePacketLengthMeanLowerBound() + strSeparadorCsv
                                + ds.getReasonablePacketLengthMeanUpperBound() + strSeparadorCsv
                                + ds.getHighPacketLengthMeanLowerBound() + strSeparadorCsv
                                + ds.getHighPacketLengthMeanUpperBound() + strSeparadorCsv
                                // + fiatNormalizado + strSeparadorCsv

                                + ds.getLowPacketLengthStdLowerBound() + strSeparadorCsv
                                + ds.getLowPacketLengthStdUpperBound() + strSeparadorCsv
                                + ds.getReasonablePacketLengthStdLowerBound() + strSeparadorCsv
                                + ds.getReasonablePacketLengthStdUpperBound() + strSeparadorCsv
                                + ds.getHighPacketLengthStdLowerBound() + strSeparadorCsv
                                + ds.getHighPacketLengthStdUpperBound() + strSeparadorCsv
                                //+ ratioPackets + strSeparadorCsv

                                + ds.getLowBackwardIatTotalLowerBound() + strSeparadorCsv
                                + ds.getLowBackwardIatTotalUpperBound() + strSeparadorCsv
                                + ds.getReasonableBackwardIatTotalLowerBound() + strSeparadorCsv
                                + ds.getReasonableBackwardIatTotalUpperBound() + strSeparadorCsv
                                + ds.getHighBackwardIatTotalLowerBound() + strSeparadorCsv
                                + ds.getHighBackwardIatTotalUpperBound() + strSeparadorCsv
                                + ds.getxPonctual() + strSeparadorCsv
                                + ds.getxInf() + strSeparadorCsv
                                + ds.getxSup() + strSeparadorCsv
                                + ds.getLowVideoLowerBound() + strSeparadorCsv
                                + ds.getLowVideoUpperBound() + strSeparadorCsv
                                + ds.getAverageVideoLowerBound() + strSeparadorCsv
                                + ds.getAverageVideoUpperBound() + strSeparadorCsv
                                + ds.getHighVideoLowerBound() + strSeparadorCsv
                                + ds.getHighVideoUpperBound() + strSeparadorCsv
                                + ds.getSequencial() + strSeparadorCsv
                                + "\n";

                        line = br.readLine();
                    }

                    lblStatusProcesso.setText("Gerando arquivo aguarde...");
                    txaExecucao.setText(strOutFile);

                    // montando configurações para arquivo de saída
                    //String strPath = System.getProperty("user.dir");
                    String strPath = "";
                    //String strFileName = "/log-saida.csv";
                    //String strFileName = vectOutFile[0]+"_out"+vectOutFile[1];
                    int pos = txtArquivo.getText().indexOf(".");
                    String strFileName = txtArquivo.getText().substring(0, pos);
                    strFileName = strFileName + "_out.csv";

                    strFileHeader = strFileHeader
                            //+ strSeparadorCsv + "biatNormalizado"

                            + strSeparadorCsv + "LowPacketLengthMeanLowerDegree"
                            + strSeparadorCsv + "LowPacketLengthMeanUpperDegree"
                            + strSeparadorCsv + "ReasonablePacketLengthMeanLowerDegree"
                            + strSeparadorCsv + "ReasonablePacketLengthMeanUpperDegree"
                            + strSeparadorCsv + "HighPacketLengthMeanLowerDegree"
                            + strSeparadorCsv + "HighPacketLengthMeanUpperDegree"
                            //+ strSeparadorCsv + "fiatNormalizado"

                            + strSeparadorCsv + "LowPacketLengthStdLowerDegree"
                            + strSeparadorCsv + "LowPacketLengthStdUpperDegree"
                            + strSeparadorCsv + "ReasonablePacketLengthStdLowerDegree"
                            + strSeparadorCsv + "ReasonablePacketLengthStdUpperDegree"
                            + strSeparadorCsv + "HighPacketLengthStdLowerDegree"
                            + strSeparadorCsv + "HighPacketLengthStdUpperDegree"
                            //+ strSeparadorCsv + "ratioNormalizado"

                            + strSeparadorCsv + "LowBackwardIatTotalLowerDegree"
                            + strSeparadorCsv + "LowBackwardIatTotalUpperDegree"
                            + strSeparadorCsv + "ReasonableBackwardIatTotalLowerDegree"
                            + strSeparadorCsv + "ReasonableBackwardIatTotalUpperDegree"
                            + strSeparadorCsv + "HighBackwardIatTotalLowerDegree"
                            + strSeparadorCsv + "HighBackwardIatTotalUpperDegree"
                            + strSeparadorCsv + "xPonctual"
                            + strSeparadorCsv + "xInf"
                            + strSeparadorCsv + "xSup"
                            + strSeparadorCsv + "LowVideoLowerDegree"
                            + strSeparadorCsv + "LowVideoUpperDegree"
                            + strSeparadorCsv + "AverageVideoLowerDegree"
                            + strSeparadorCsv + "AverageVideoUpperDegree"
                            + strSeparadorCsv + "HighVideoLowerDegree"
                            + strSeparadorCsv + "HighVideoUpperDegree"
                            + strSeparadorCsv + "Sequencial";

                    LibFile libFile = new LibFile();
                    libFile.escreverTxt(txaExecucao.getText(), strPath, strFileName, strFileHeader);

                    txtArquivoSaida.setText(strFileName);

                    // colocar aqui a geração de arquivos para ordens adimissiveis
                    lblStatusProcesso.setText("Gerando arquivos com ordens admissíveis! Aguarde...");

                    JStatusProcesso.setIndeterminate(true);
                    //JStatusProcesso.setString("");
                    JStatusProcesso.setStringPainted(false);
                    JStatusProcesso.setBorderPainted(true);

                    // Verificar biblioteca OpenCSV
                    //https://sourceforge.net/projects/opencsv/files/
                    // Exemplos OpenCSV
                    //https://dicasdejava.com.br/como-escrever-arquivos-csv-em-java/
                    
                   

                    // Definindo a ordem do header
//                    ColumnPositionMappingStrategy<DataSet> strat = new ColumnPositionMappingStrategyBuilder<DataSet>().build();
//                    strat.setType(DataSet.class);
//                    String[] columns = new String[]{"fwdPacketLengthMean", "fwdPacketLengthStd", "bwdIATTotal", "packetLengthMean",
//                        "floxLabel", "normFwdPacketLengthMean", "normPacketLengthMean", "normFwdPacketLengthStd", "normBwdIATTotal",
//                        "xPonctual", "xInf", "xSup", "lowPacketLengthMeanUpperBound", "lowPacketLengthMeanLowerBound",
//                        "reasonablePacketLengthMeanUpperBound", "reasonablePacketLengthMeanLowerBound", "highPacketLengthMeanUpperBound",
//                        "highPacketLengthMeanLowerBound", "lowPacketLengthStdUpperBound", "lowPacketLengthStdLowerBound",
//                        "reasonablePacketLengthStdUpperBound", "reasonablePacketLengthStdLowerBound", "highPacketLengthStdUpperBound",
//                        "highPacketLengthStdLowerBound", "lowBackwardIatTotalUpperBound", "lowBackwardIatTotalLowerBound",
//                        "reasonableBackwardIatTotalUpperBound", "reasonableBackwardIatTotalLowerBound", "highBackwardIatTotalUpperBound",
//                        "highBackwardIatTotalLowerBound", "lowVideoUpperBound", "lowVideoLowerBound", "averageVideoUpperBound", "averageVideoLowerBound",
//                        "highVideoUpperBound", "highVideoLowerBound", "Sequencial"}; // the fields to bind to in your bean
//                    strat.setColumnMapping(columns);
//                    
//                    CsvToBean csv = new CsvToBean();
//                    List list = csv.parse(strat, columns);
                    

                    // comando para adicionar conteudo no inicio do arquivo por shell script
                    //https://qastack.com.br/programming/9533679/how-to-insert-a-text-at-the-beginning-of-a-file
                    //echo "$(echo -n 'hello'; cat dataset_17102021_out_a.csv)" > dataset_17102021_out_a.csv
                    //JOptionPane.showMessageDialog(null, strFileNameA);
                    //String commandAddHeaderFileLex1 = "echo \"$(echo -n '" + header +"'; cat "+strFileNameLex1 +") \" > "+ strFileNameLex1;
                    //String commandAddHeaderFileLex2 = "echo \"$(echo -n '" + header +"'; cat "+strFileNameLex2 +" ) \" > "+ strFileNameLex2;
                    //String commandAddHeaderFileA = "echo \"$(echo -n '" + header +"'; cat "+strFileNameA +" ) \" > "+ strFileNameA;
                    //String commandAddHeaderFileXY = "echo \"$(echo -n '" + header +"'; cat "+strFileNameXuAndYager +" ) \" > "+ strFileNameXuAndYager;
                    //sed -i '1i\texto texto texto\' dataset_17102021_out_a.csv
                    //JOptionPane.showMessageDialog(null, commandAddHeaderFileLex1);
                    //Executando Shell dentro do Java
                    //https://www.devmedia.com.br/executando-shell-scripts-utilizando-java/26495
                    String header = "fwdPacketLengthMean, fwdPacketLengthStd, bwdIATTotal, packetLengthMean, floxLabel, "
                            + "normFwdPacketLengthMean, normPacketLengthMean, normFwdPacketLengthStd, normBwdIATTotal,"
                            + "xPonctual, xInf, xSup, lowPacketLengthMeanUpperBound, lowPacketLengthMeanLowerBound,"
                            + "reasonablePacketLengthMeanUpperBound, reasonablePacketLengthMeanLowerBound, highPacketLengthMeanUpperBound,"
                            + "highPacketLengthMeanLowerBound, lowPacketLengthStdUpperBound, lowPacketLengthStdLowerBound,"
                            + "reasonablePacketLengthStdUpperBound, reasonablePacketLengthStdLowerBound, highPacketLengthStdUpperBound,"
                            + "highPacketLengthStdLowerBound, lowBackwardIatTotalUpperBound, lowBackwardIatTotalLowerBound,"
                            + "reasonableBackwardIatTotalUpperBound, reasonableBackwardIatTotalLowerBound, highBackwardIatTotalUpperBound,"
                            + "highBackwardIatTotalLowerBound, lowVideoUpperBound, lowVideoLowerBound, averageVideoUpperBound, averageVideoLowerBound,"
                            + "highVideoUpperBound, highVideoLowerBound, Sequencial";

                    LocalShell localShell = new LocalShell();
                    
                    
                     // preparar os metodos de ordenação para colocar aqui
                     
                    // colocar aqui ordenação por pontual 
                    Collections.sort(listDataSet);
                    System.out.println("Com ordenação pontual");
                    System.out.println(listDataSet);
                    
                     // monta nome do arquivo de saida ordem da ordenação pontual
                    pos = strFileName.indexOf(".");
                    String strFileNameXPontual = strFileName.substring(0, pos);
                    strFileNameXPontual = strFileNameXPontual + "_xp.csv";
                    //JOptionPane.showMessageDialog(null, strFileNameXuAndYager);
                    
                    //Writer writer = Files.newBufferedWriter(Paths.get(txtArquivoSaida.getText()+"xy"));
                    Writer writerXPontual = Files.newBufferedWriter(Paths.get(strFileNameXPontual));
                    StatefulBeanToCsv<DataSet> arrayToCsvXPontual = new StatefulBeanToCsvBuilder(writerXPontual).build();
                    arrayToCsvXPontual.write(listDataSet);

                    writerXPontual.flush();
                    writerXPontual.close();

                    String commandAddHeaderFileXPontual = " sed -i '1i\\" + header + "\\' " + strFileNameXPontual;
                    lblStatusProcesso.setText("Adicionando cabeçalho ao arquivo da ordenação pontual");
                    localShell.executeCommand(commandAddHeaderFileXPontual);
                    // Fim da ordenação com Pontual
                    
                     
                    ComparatorXuAndYager comparatorXuAndYager = new ComparatorXuAndYager();

                    Collections.sort(listDataSet, comparatorXuAndYager);
                    System.out.println("Com ordenação Xu and Yager");
                    System.out.println(listDataSet);

                    // monta nome do arquivo de saida ordem de Xu e Yager
                    pos = strFileName.indexOf(".");
                    String strFileNameXuAndYager = strFileName.substring(0, pos);
                    strFileNameXuAndYager = strFileNameXuAndYager + "_xy.csv";
                    //JOptionPane.showMessageDialog(null, strFileNameXuAndYager);

                    //Writer writer = Files.newBufferedWriter(Paths.get(txtArquivoSaida.getText()+"xy"));
                    Writer writerXY = Files.newBufferedWriter(Paths.get(strFileNameXuAndYager));
                    StatefulBeanToCsv<DataSet> arrayToCsvXY = new StatefulBeanToCsvBuilder(writerXY).build();
                    arrayToCsvXY.write(listDataSet);

                    writerXY.flush();
                    writerXY.close();

                    String commandAddHeaderFileXY = " sed -i '1i\\" + header + "\\' " + strFileNameXuAndYager;
                    lblStatusProcesso.setText("Adicionando cabeçalho aos arquivos de ordens admissíveis de XY");
                    localShell.executeCommand(commandAddHeaderFileXY);
                    // Fim da ordenação com Xu and Yager

                    // Inicio da ordem Lex1
                    ComparatorLex1 comparatorLex1 = new ComparatorLex1();

                    Collections.sort(listDataSet, comparatorLex1);
                    System.out.println("Com ordenação Lex1");
                    System.out.println(listDataSet);

                    String strFileNameLex1 = strFileName.substring(0, pos);
                    strFileNameLex1 = strFileNameLex1 + "_lex1.csv";

                    Writer writerLex1 = Files.newBufferedWriter(Paths.get(strFileNameLex1));
                    StatefulBeanToCsv<DataSet> arrayToCsvLex1 = new StatefulBeanToCsvBuilder(writerLex1).build();
                    arrayToCsvLex1.write(listDataSet);

                    writerLex1.flush();
                    writerLex1.close();

                    String commandAddHeaderFileLex1 = " sed -i '1i\\" + header + "\\' " + strFileNameLex1;
                    lblStatusProcesso.setText("Adicionando cabeçalho aos arquivos de ordens admissíveis de Lex1");
                    localShell.executeCommand(commandAddHeaderFileLex1);
                    // Fim da ordem Lex1

                    // Inicio da ordem Lex2
                    ComparatorLex2 comparatorLex2 = new ComparatorLex2();

                    Collections.sort(listDataSet, comparatorLex2);
                    System.out.println("Com ordenação Lex2");
                    System.out.println(listDataSet);

                    String strFileNameLex2 = strFileName.substring(0, pos);
                    strFileNameLex2 = strFileNameLex2 + "_lex2.csv";

                    Writer writerLex2 = Files.newBufferedWriter(Paths.get(strFileNameLex2));
                    StatefulBeanToCsv<DataSet> arrayToCsvLex2 = new StatefulBeanToCsvBuilder(writerLex2).build();
                    arrayToCsvLex2.write(listDataSet);

                    writerLex2.flush();
                    writerLex2.close();

                    String commandAddHeaderFileLex2 = " sed -i '1i\\" + header + "\\' " + strFileNameLex2;
                    lblStatusProcesso.setText("Adicionando cabeçalho aos arquivos de ordens admissíveis de Lex2");
                    localShell.executeCommand(commandAddHeaderFileLex2);
                    // Fim da ordem Lex2

                    // Inicio da ordem A
                    ComparatorA comparatorA = new ComparatorA();

                    Collections.sort(listDataSet, comparatorA);
                    System.out.println("Com ordenação A");
                    System.out.println(listDataSet);

                    String strFileNameA = strFileName.substring(0, pos);
                    //String strFileNameA = "order";
                    strFileNameA = strFileNameA + "_a.csv";

                    Writer writerA = Files.newBufferedWriter(Paths.get(strFileNameA));
                    StatefulBeanToCsv<DataSet> arrayToCsvA = new StatefulBeanToCsvBuilder(writerA).build();
                    arrayToCsvA.write(listDataSet);

                    writerA.flush();
                    writerA.close();

                    String commandAddHeaderFileA = " sed -i '1i\\" + header + "\\' " + strFileNameA;
                    lblStatusProcesso.setText("Adicionando cabeçalho aos arquivos de ordens admissíveis de A");
                    localShell.executeCommand(commandAddHeaderFileA);
                    // Fim da ordem A

                    lblStatusProcesso.setText("Finalizando arquivos com ordens admissíveis!");

                    JStatusProcesso.setString("100%");
                    JStatusProcesso.setStringPainted(true);
                    JStatusProcesso.setBorderPainted(true);
                    JStatusProcesso.setIndeterminate(false);

                    lblStatusProcesso.setText("Processamento realizado!");
                    txaErro.setText("Processamento realizado com sucesso!");

                } catch (Exception e) {
                    System.out.println("Erro: " + e.getMessage());
                    e.printStackTrace();
                    txaErro.setText("Erro: " + e.getMessage() + "\n"
                            + e.toString());
                }

            }

        }.start();


    }//GEN-LAST:event_btnExecutarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //if ("Nimbus".equals(info.getName())) {
                //if ("Metal".equals(info.getName())) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmClassificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmClassificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmClassificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmClassificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmClassificador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar JStatusProcesso;
    private javax.swing.JButton btnArquivo;
    private javax.swing.JButton btnExecutar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatusProcesso;
    private javax.swing.JTextArea txaErro;
    private javax.swing.JTextArea txaExecucao;
    private javax.swing.JTextField txtArquivo;
    private javax.swing.JTextField txtArquivoSaida;
    // End of variables declaration//GEN-END:variables
}
